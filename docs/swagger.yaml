definitions:
  dtos.AuthInput:
    properties:
      name:
        type: string
      password:
        type: string
    required:
    - name
    - password
    type: object
  dtos.ChangePhotoURL:
    properties:
      photoURL:
        type: string
    required:
    - photoURL
    type: object
  dtos.Contest:
    properties:
      countMatches:
        type: integer
      rounds:
        items:
          $ref: '#/definitions/dtos.Round'
        type: array
    type: object
  dtos.CreateTiktok:
    properties:
      name:
        type: string
      url:
        type: string
    required:
    - name
    - url
    type: object
  dtos.CreateTournament:
    properties:
      name:
        type: string
      photoURL:
        type: string
      size:
        maximum: 64
        minimum: 4
        type: integer
      tiktoks:
        items:
          $ref: '#/definitions/dtos.CreateTiktok'
        type: array
    required:
    - name
    - photoURL
    - tiktoks
    type: object
  dtos.EditTournament:
    properties:
      name:
        type: string
      photoURL:
        type: string
      size:
        maximum: 64
        minimum: 4
        type: integer
      tiktoks:
        items:
          $ref: '#/definitions/dtos.CreateTiktok'
        type: array
    required:
    - name
    - photoURL
    - tiktoks
    type: object
  dtos.Match:
    properties:
      firstOption: {}
      matchID:
        type: string
      secondOption: {}
    type: object
  dtos.MessageResponseType:
    properties:
      message:
        type: string
    type: object
  dtos.RegisterDetails:
    properties:
      id:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  dtos.Round:
    properties:
      matches:
        items:
          $ref: '#/definitions/dtos.Match'
        type: array
      round:
        type: integer
    type: object
  dtos.TournamentIds:
    properties:
      tournamentIds:
        items:
          type: string
        type: array
    required:
    - tournamentIds
    type: object
  dtos.TournamentWinner:
    properties:
      tiktokURL:
        type: string
    required:
    - tiktokURL
    type: object
  dtos.TournamentsResponse:
    properties:
      tournamentCount:
        type: integer
      tournaments:
        items:
          $ref: '#/definitions/models.Tournament'
        type: array
    required:
    - tournamentCount
    - tournaments
    type: object
  dtos.WhoAmI:
    properties:
      id:
        type: string
      photoURL:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  models.Tiktok:
    properties:
      name:
        type: string
      tournament:
        $ref: '#/definitions/models.Tournament'
      tournamentID:
        type: string
      url:
        type: string
      wins:
        type: integer
    type: object
  models.Tournament:
    properties:
      id:
        type: string
      name:
        type: string
      photoURL:
        type: string
      size:
        type: integer
      timesPlayed:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: string
      name:
        type: string
      password:
        type: string
      photoURL:
        type: string
    type: object
info:
  contact: {}
  description: API for TikTok arena application
  title: TikTok arena API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user with given credentials
      parameters:
      - description: Data to login user
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login success
          schema:
            $ref: '#/definitions/dtos.RegisterDetails'
        "400":
          description: Error logging in
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Login user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register new user with given credentials
      parameters:
      - description: Data to register user
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: Register success
          schema:
            $ref: '#/definitions/dtos.RegisterDetails'
        "400":
          description: Failed to register user
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Register user
      tags:
      - auth
  /api/auth/whoami:
    get:
      consumes:
      - application/json
      description: Get current user id and name
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/dtos.WhoAmI'
        "400":
          description: Error getting user data
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Authenticated user details
      tags:
      - auth
  /api/tournament/contest/{tournamentId}:
    get:
      consumes:
      - application/json
      description: Get tournament contests
      parameters:
      - description: Tournament id
        in: path
        name: tournamentId
        required: true
        type: string
      - in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Contest bracket
          schema:
            $ref: '#/definitions/dtos.Contest'
        "400":
          description: Failed to return tournament contests
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Tournament contests
      tags:
      - tournament
  /api/tournament/create:
    post:
      consumes:
      - application/json
      description: Create new tournament for current user
      parameters:
      - description: Data to create tournament
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateTournament'
      produces:
      - application/json
      responses:
        "200":
          description: Tournament created
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
        "400":
          description: Error during tournament creation
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Create new tournament
      tags:
      - tournament
  /api/tournament/delete/{tournamentId}:
    delete:
      consumes:
      - application/json
      description: Delete tournaments for current user
      parameters:
      - description: Data to delete tournaments
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.TournamentIds'
      produces:
      - application/json
      responses:
        "200":
          description: Tournaments deleted
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
        "400":
          description: Error during tournaments deletion
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Delete tournaments
      tags:
      - tournament
  /api/tournament/details/{tournamentId}:
    get:
      consumes:
      - application/json
      description: Get tournament details by its id
      parameters:
      - description: Tournament id
        in: path
        name: tournamentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournament
          schema:
            $ref: '#/definitions/dtos.TournamentsResponse'
        "400":
          description: Tournament not found
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Tournament details
      tags:
      - tournament
  /api/tournament/edit:
    put:
      consumes:
      - application/json
      description: Edit tournament for current user
      parameters:
      - description: Data to edit tournament
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.EditTournament'
      produces:
      - application/json
      responses:
        "200":
          description: Tournament edited
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
        "400":
          description: Error during tournament edition
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Edit tournament
      tags:
      - tournament
  /api/tournament/tiktoks/{tournamentId}:
    get:
      consumes:
      - application/json
      description: Get tournament tiktoks
      parameters:
      - description: Tournament id
        in: path
        name: tournamentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournament tiktoks
          schema:
            items:
              $ref: '#/definitions/models.Tiktok'
            type: array
        "400":
          description: Tournament not found
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Tournament tiktoks
      tags:
      - tournament
  /api/tournament/tournaments:
    get:
      consumes:
      - application/json
      description: Get all tournaments
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: page size
        in: query
        name: count
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: All tournaments
          schema:
            items:
              $ref: '#/definitions/dtos.TournamentsResponse'
            type: array
        "400":
          description: Failed to get all tournaments
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: All tournaments
      tags:
      - tournament
  /api/tournament/winner/{tournamentId}:
    put:
      consumes:
      - application/json
      description: Increment wins and increment times_played
      parameters:
      - description: Tournament id
        in: path
        name: tournamentId
        required: true
        type: string
      - description: Data to update tournament winner
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.TournamentWinner'
      produces:
      - application/json
      responses:
        "200":
          description: Winner updated
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
        "400":
          description: Error during winner updating
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      summary: Update tournament winner statistics
      tags:
      - tournament
  /api/user/photo:
    put:
      consumes:
      - application/json
      description: Change user photo for current user
      parameters:
      - description: Data to change photo
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangePhotoURL'
      produces:
      - application/json
      responses:
        "200":
          description: Photo edited
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
        "400":
          description: Error during photo change
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Change user photo
      tags:
      - user
  /api/user/tournaments:
    get:
      consumes:
      - application/json
      description: Get tournaments for user
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: page size
        in: query
        name: count
        type: string
      - description: sort page by name
        in: query
        name: sort_name
        type: string
      - description: sort page by size
        in: query
        name: sort_size
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tournaments of user
          schema:
            $ref: '#/definitions/dtos.TournamentsResponse'
        "400":
          description: Couldn't get tournaments for specific user
          schema:
            $ref: '#/definitions/dtos.MessageResponseType'
      security:
      - JWT: []
      summary: Get tournaments for user
      tags:
      - user
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
